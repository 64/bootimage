# Documentation: https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    # This is where pull requests from "bors r+" are built.
    - staging
    # This is where pull requests from "bors try" are built.
    - trying
    # Build pull requests.
    - master

strategy:
  matrix:
    linux:
      image_name: 'ubuntu-16.04'
      rustup_toolchain: stable
    mac:
      image_name: 'macos-10.13'
      rustup_toolchain: stable
    windows:
      image_name: 'vs2017-win2016'
      rustup_toolchain: stable

pool:
  vmImage: $(image_name)

steps:
- bash: |
    echo "Hello world from $AGENT_NAME running on $AGENT_OS"
    echo "Reason: $BUILD_REASON"
    case "$BUILD_REASON" in
            "Manual") echo "$BUILD_REQUESTEDFOR manually queued the build." ;;
            "PullRequest") echo "This is a CI build for a pull request on $BUILD_REQUESTEDFOR." ;;
            "IndividualCI") echo "This is a CI build for $BUILD_REQUESTEDFOR." ;;
            "BatchedCI") echo "This is a batched CI build for $BUILD_REQUESTEDFOR." ;;
        *) "$BUILD_REASON" ;;
    esac
  displayName: 'Build Info'
  continueOnError: true

- script: |
    set -euxo pipefail
    curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
    echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
  condition: or(eq( variables['Agent.OS'], 'Linux' ),  eq( variables['Agent.OS'], 'Darwin' ))
  displayName: 'Install Rust (Linux/macOS)'

- script: curl -sSf -o rustup-init.exe https://win.rustup.rs && rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: 'Install Rust (Windows)'

- script: |
    echo ##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: 'Add ~/.cargo/bin to PATH (Windows)'

- script: |
    rustc -Vv
    cargo -V
  displayName: 'Print Rust Version'
  continueOnError: true

- script: cargo build
  displayName: 'Build'

- script: cargo test
  displayName: 'Test'

- script: rustup component add rust-src llvm-tools-preview
  displayName: 'Install Rustup Components'

- script: cargo install cargo-xbuild --debug
  displayName: 'Install cargo-xbuild'

- script: sudo apt update && sudo apt install qemu-system-x86
  condition: eq( variables['Agent.OS'], 'Linux' )
  displayName: 'Install QEMU (Linux)'

- script: |
    set -euxo pipefail
    export HOMEBREW_NO_AUTO_UPDATE=1
    export HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK=1
    export HOMEBREW_NO_INSTALL_CLEANUP=1
    brew install qemu
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: 'Install QEMU (macOS)'

- script: |
    choco install qemu --limit-output --no-progress
    echo ##vso[task.setvariable variable=PATH;]%PATH%;C:\Program Files\qemu
    set PATH=%PATH%;C:\Program Files\qemu
    qemu-system-x86_64 --version
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  failOnStderr: true
  displayName: 'Install QEMU (Windows)'

- script: cargo install --path . --force --debug
  displayName: 'Install this bootimage version'

- script: rustup toolchain add nightly
  displayName: 'Install Rust Nightly'

- script: bootimage build --target x86_64-basic.json && file target/x86_64-basic/debug/bootimage-basic.bin
  workingDirectory: example-kernels/basic
  displayName: 'Build Example Kernel "Basic"'

- script: bootimage run --target x86_64-basic.json
  workingDirectory: example-kernels/basic
  displayName: 'Run Example Kernel "basic"'

- script: bootimage build && file target/x86_64-default-target/debug/bootimage-default-target-bootimage.bin
  workingDirectory: example-kernels/default-target-bootimage
  displayName: 'Build Example Kernel "default-target-bootimage"'

- script: bootimage run
  workingDirectory: example-kernels/default-target-bootimage
  displayName: 'Run Example Kernel "default-target-bootimage"'

- script: bootimage build && file target/x86_64-default-target/debug/bootimage-default-target-cargo.bin
  workingDirectory: example-kernels/default-target-cargo
  displayName: 'Build Example Kernel "default-target-cargo"'

- script: bootimage run
  workingDirectory: example-kernels/default-target-cargo
  displayName: 'Run Example Kernel "default-target-cargo"'
